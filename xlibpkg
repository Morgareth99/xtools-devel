#!/usr/bin/env python3

from typing import List

def place_in_file(pkglist: List[str], filepath: str):

    from re import search

    template_file: List[str] = []
    hasdevel: bool = False

    with open(filepath, 'r') as file_in:
        for line in file_in:
            """
                we search for a -devel package definition and put our
                lib package definition before it, if not we just add
                our definition to the end of the file
            """
            if search('-devel_package()', line) and not hasdevel:
                hasdevel = True
                template_file.append('\n'.join(pkglist))
                template_file.append('')
            template_file.append(line.strip('\n'))

        if not hasdevel:
            for pkgl in pkglist:
                template_file.append(pkgl)

    with open(filepath, 'w') as file_out:
        file_out.write('\n'.join(template_file))


def make_symlink(srcpkg: str, dstpkg: str, path: str) -> bool:
    from os import chdir, symlink
    from os.path import exists, realpath, islink

    chdir(path)

    if exists(dstpkg):
        if islink(dstpkg) and realpath(dstpkg) == realpath(srcpkg):
            return True

        print("Can't make symlink %s exists" % dstpkg)
        return False

    if not exists(srcpkg):
        print("Can't make symlink %s doesn't exist" % srcpkg)
        return False

    symlink(srcpkg, dstpkg)

    if islink(dstpkg) and realpath(dstpkg) == realpath(srcpkg):
        return True

    print("Failed to make symlink to %s" % dstpkg)
    return False


def main():
    from argparse import ArgumentParser
    from os.path import isfile
    from subprocess import run, PIPE
    from re import sub

    p = ArgumentParser(description="create libpkg packages.")
    p.add_argument('--pkg', dest='pkgname', required=True,
                   help='name of the main package')
    p.add_argument('--lib', dest='lib', nargs='+',
                   help='name of the lib packages')
    p.add_argument('-i', dest='replace', action='store_true', default=False,
                   help='replace dependencies in template')

    args = p.parse_args()

    """
        if no library packages are defined via --lib then we turn args.lib
        into the pkgname provided prefixed with lib
    """
    if not args.lib:
        args.lib: List[str] = ['lib' + args.pkgname]

    """
        Create a path by taking xdistdir and add srcpkgs/ the pkgname and
        /template
    """
    filepath: str = 'srcpkgs/' + args.pkgname + '/template'
    xdistdir = run('xdistdir', stdout=PIPE).stdout.decode('utf-8')
    xdistdir = xdistdir.replace('\n', '/')
    filepath = xdistdir + filepath

    if not isfile(filepath):
        print("Invalid filepath: %s" % filepath)
        exit(2)

    for libpkgname in args.lib:

        pkglist: List[str] = []
        pkglist.append('%s_package() {' % libpkgname)

        if len(args.lib) > 1:
            """
                We are creating a string to be used in the description
                we don't need to indicate it is a library or it's version
                so we strip them out, an example is libgtk+-3 which becomes
                gtk+ library
            """
            libname = sub('(lib)?(-[0-9].*)?', '', libpkgname)
            pkglist.append('\tshort_desc="%s library"' % libname)
        else:
            pkglist.append('\tshort_desc+=" - runtime library"')

        pkglist.append('\tpkg_install() {')

        if len(args.lib) > 1:
            pkglist.append('\t\tvmove "/usr/lib/%s*.so.*"' % libpkgname)
        else:
            pkglist.append('\t\tvmove "/usr/lib/*.so.*"')

        pkglist.append('\t}')
        pkglist.append('}')

        if args.replace:
            if not make_symlink(args.pkgname,
                                libpkgname, xdistdir + 'srcpkgs'):
                exit(1)

            with open(filepath, 'r') as file_in:
                if file_in.read().find(libpkgname + '_package()') != -1:
                    print('package name %s already taken' % libpkgname)
                    continue

            place_in_file(pkglist, filepath)

        print('\n'.join(pkglist))


if __name__ == "__main__":
    main()
