#!/usr/bin/env python3

import argparse
import subprocess
import os.path
import sys
import re
from typing import List


def place_in_file(pkglist: List[str], filepath: str):
    template_file: List[str] = []
    hasdevel: bool = False

    with open(filepath, 'r') as file_in:
        for line in file_in:
            """
                we search for a -devel package definition and put our
                lib package definition before it, if not we just add
                our definition to the end of the file
            """
            if re.search('-devel_package()', line) and not hasdevel:
                hasdevel = True
                for pkgl in pkglist:
                    template_file.append(pkgl)
                template_file.append('')
            template_file.append(line.strip('\n'))

        if not hasdevel:
            for pkgl in pkglist:
                template_file.append(pkgl)

    with open(filepath, 'w') as file_out:
        file_out.write('\n'.join(template_file))


def main():
    p = argparse.ArgumentParser(description="create libpkg packages.")
    p.add_argument('pkgname', help='name of the original package')
    p.add_argument('--lib', dest='lib', nargs='+',
                   help='name of the lib packages')
    p.add_argument('-i', dest='replace', action='store_true', default=False,
                   help='replace dependencies in template')

    args = p.parse_args()

    """
        if no library packages are defined via --lib then we turn args.lib
        into the pkgname provided prefixed with lib
    """
    if not args.lib:
        args.lib: List[str] = []
        args.lib.append('lib' + args.pkgname)

    """
        Create a path by taking xdistdir and add srcpkgs/ the pkgname and
        /template
    """
    filepath: str = 'srcpkgs/' + args.pkgname + '/template'
    xdistdir = subprocess.run('xdistdir', stdout=subprocess.PIPE)
    filepath = xdistdir.stdout.decode('utf-8').replace('\n', '/') + filepath

    if not os.path.isfile(filepath):
        print("Invalid filepath: %s" % filepath)
        sys.exit(2)

    for libpkgname in args.lib:

        pkglist: List[str] = ['']
        pkglist.append('%s_package() {' % libpkgname)

        if len(args.lib) > 1:
            """
                We are creating a string to be used in the description
                we don't need to indicate it is a library or it's version
                so we strip them out, an example is libgtk+-3 which becomes
                gtk+ library
            """
            libname = re.sub('lib', '', libpkgname)
            libname = re.sub('-[0-9].*', '', libname)
            pkglist.append('\tshort_desc="%s library"' % libname)
        else:
            pkglist.append('\tshort_desc+=" - runtime library"')

        pkglist.append('\tpkg_install() {')

        if len(args.lib) > 1:
            pkglist.append('\t\tvmove "/usr/lib/%s*.so.*"' % libpkgname)
        else:
            pkglist.append('\t\tvmove "/usr/lib/*.so.*"')

        pkglist.append('\t}')
        pkglist.append('}')

        if args.replace:
            with open(filepath, 'r') as file_in:
                if file_in.read().find(libpkgname + '_package()') != -1:
                    print('package name %s already taken' % libpkgname)
                    continue

            place_in_file(pkglist, filepath)

        print('\n'.join(pkglist))

    if args.replace:
        with open(filepath, 'r') as file_in:
            f = file_in.read()

            if f.find(args.libpkgname) != -1:
                print('package name %s already taken' % args.libpkgname)
                sys.exit(2)

        file_in.close()

    if args.replace:
        with open(filepath, "a") as file_out:
            file_out.close()


if __name__ == "__main__":
    main()
